# generated by datamodel-codegen:
#   filename:  sample-Mateusz.json
#   timestamp: 2024-01-30T18:42:35+00:00

from __future__ import annotations

from enum import Enum
import json
from typing import List, Optional, Union

from pydantic import BaseModel, Extra, Field, RootModel


class Antibody(BaseModel):
    class Config:
        extra = Extra.allow

    name: str = Field(..., title='Antibody Name')


class crisprFields(BaseModel):
    class Config:
        title = ""

    name: str = Field(..., title='Target Gene')
    

class cellLineFields(BaseModel):
    class Config:
        title = ""

    name: str = Field(..., title='Cell Line Name')


class differentiatedCellsFields(BaseModel):
    class Config:
        title = ""

    name: str = Field(..., title='Cell Type')
    

class EpigeneticModification(BaseModel):
    class Config:
        extra = Extra.allow

    name: str = Field(..., title='Modification Type')


class Gene(BaseModel):
    class Config:
        extra = Extra.allow

    name: str = Field(..., title='Gene Name')


class InfectiousAgent(BaseModel):
    class Config:
        extra = Extra.allow

    name: str = Field(..., title='Agent Name')


class cellLine(BaseModel):
    class Config:
        title = "Cell Line"

    entity: str = Field(title="entity",default="Cell Line", json_schema_extra=
                        {"const": "Cell Line"})
    content: cellLineFields


class differentiatedCells(BaseModel):
    class Config:
        title = "Differentiated Cells"

    entity: str = Field(title="entity",default="Differentiated Cell", json_schema_extra=
                        {"const": "Differentiated Cell"})
    content: differentiatedCellsFields


class patientSampleFields(BaseModel):
    class Config:
        title = ""

    name: str = Field(..., title='Tumor Type')


class primaryCellsFields(BaseModel):
    class Config:
        title = ""

    name: str = Field(..., title='Cell Type')


class Protein(BaseModel):
    class Config:
        extra = Extra.allow

    name: str = Field(..., title='Protein Name')


class ProteinP(BaseModel):
    class Config:
        extra = Extra.allow

    name: str = Field(..., title='Protein Name')


class RNAi(BaseModel):
    class Config:
        extra = Extra.allow

    name: str = Field(..., title='Target Sequence')


class SmallMolecule(BaseModel):
    class Config:
        extra = Extra.allow

    name: str = Field(..., title='Small Molecule Name')


class Target1(BaseModel):
    class Config:
        extra = Extra.allow

    entity: str
    content: Gene


class Target3(BaseModel):
    class Config:
        extra = Extra.allow

    entity: str
    content: Protein


class Target4(BaseModel):
    class Config:
        extra = Extra.allow

    entity: str
    content: EpigeneticModification


class tissueFields(BaseModel):
    class Config:
        title = ""

    name: str = Field(..., title='Tissue Type')


class Transcript(BaseModel):
    class Config:
        extra = Extra.allow

    name: str = Field(..., title='NCBI Accession Number')


class wastewaterFields(BaseModel):
    class Config:
        title = ""

    name: str = Field(..., title='Sample ID')


class ipscFields(BaseModel):
    class Config:
        title = ""

    name: str = Field(..., title='iPSC ID')


class Duration(Enum):
    minutes = 'minutes'
    hours = 'hours'
    days = 'days'


class Concentration(Enum):
    millimolar = 'millimolar'
    micromolar = 'micromolar'
    nanomolar = 'nanomolar'


class Perturbation6(BaseModel):
    class Config:
        extra = Extra.allow

    duration: Optional[Duration] = Field('minutes', title='Duration')
    concentration: Optional[Concentration] = Field('millimolar', title='Concentration')


class Perturbation(BaseModel):
    class Config:
        extra = Extra.allow

    entity: str
    duration: Duration
    concentration: Concentration
    content: SmallMolecule


class Perturbation1(BaseModel):
    class Config:
        extra = Extra.allow

    entity: str
    duration: Duration
    concentration: Concentration
    content: crisprFields


class Perturbation2(BaseModel):
    class Config:
        extra = Extra.allow

    entity: str
    duration: Duration
    concentration: Concentration
    content: RNAi


class Perturbation3(BaseModel):
    class Config:
        extra = Extra.allow

    entity: str
    duration: Duration
    concentration: Concentration
    content: Antibody


class Perturbation4(BaseModel):
    class Config:
        extra = Extra.allow

    entity: str
    duration: Duration
    concentration: Concentration
    content: ProteinP


class Perturbation5(BaseModel):
    class Config:
        extra = Extra.allow

    entity: str
    duration: Duration
    concentration: Concentration
    content: InfectiousAgent


class patientSample(BaseModel):
    class Config:
        title = "Patient Sample"

    entity: str = Field(title="entity",default="Patient Sample", json_schema_extra=
                        {"const": "Patient Sample"})
    content: patientSampleFields


class wastewater(BaseModel):
    class Config:
        title = "Wastewater"

    entity: str = Field(title="entity",default="Wastewater", json_schema_extra=
                        {"const": "Wastewater"})
    content: wastewaterFields


class biospecimenFields(RootModel[Union[patientSample, wastewater]]):
    class Config:
        title = ""

class ipsc(BaseModel):
    class Config:
        title = "IPSC"

    entity: str = Field(title="entity",default="IPSC", json_schema_extra=
                        {"const": "IPSC"})
    content: ipscFields


class primaryCells(BaseModel):
    class Config:
        title = "Primary Cells"

    entity: str = Field(title="entity",default="Primary Cells", json_schema_extra=
                        {"const": "Primary Cells"})
    content: primaryCellsFields


class tissue(BaseModel):
    class Config:
        title = "Tissue"

    entity: str = Field(title="entity",default="Tissue", json_schema_extra=
                        {"const": "Tissue"})
    content: tissueFields


class modelSystemFields(RootModel[Union[
        cellLine, ipsc, primaryCells, differentiatedCells, tissue]]):

    class Config:
        title = ""


class Target2(BaseModel):
    class Config:
        extra = Extra.allow

    entity: str
    content: Transcript


class molecularTargetFields(RootModel[Union[Target1, Target2, Target3, Target4]]):
    class Config:
        title = ""

class modelSystem(BaseModel):
    class Config:
        title = "Model System"

    entity: str = Field(title="entity",default="Model System", json_schema_extra=
                        {"const": "Model System"})
    content: modelSystemFields


class biospecimen(BaseModel):
    class Config:
        title = "Biospecimen"

    entity: str = Field(title="entity",default="Biospecimen", json_schema_extra=
                        {"const": "Biospecimen"})
    content: biospecimenFields


class molecularTarget(BaseModel):
    class Config:
        title = "Molecular Target"

    entity: str = Field(title="entity",default="Molecular Target", json_schema_extra=
                        {"const": "Molecular Target"})
    content: molecularTargetFields


class Sample(BaseModel):
    class Config:
        extra = Extra.allow

    sampleName: str = Field(..., title='Sample Name')
    description: str = Field(..., title='Description')
    experimentalSubject: Union[
        modelSystem, biospecimen, molecularTarget
    ] = Field(..., title='Experimental Subject')
    perturbation: List[
        Union[
            Perturbation,
            Perturbation1,
            Perturbation2,
            Perturbation3,
            Perturbation4,
            Perturbation5,
        ]
    ] = Field(..., title='Perturbation')

def example():
    """ run this to see the schema dumped """
    with open ("model.json", "w") as ft:
        print(json.dumps(Sample.model_json_schema(), indent=2), 
            file = ft)

example()
